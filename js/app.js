const webapp = window.Telegram.WebApp;
webapp.ready();

const alertManager = new AlertManager();
let selectedCondition = "above";

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
webapp.MainButton.setText("–î–û–ë–ê–í–ò–¢–¨ –ê–õ–ï–†–¢");
webapp.MainButton.show();

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏—è
document.querySelectorAll(".condition-btn").forEach((btn) => {
  btn.addEventListener("click", () => {
    document
      .querySelectorAll(".condition-btn")
      .forEach((b) => b.classList.remove("active"));
    btn.classList.add("active");
    selectedCondition = btn.dataset.condition;
  });
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–ª–µ—Ä—Ç–∞
webapp.MainButton.onClick(() => {
  const crypto = document.getElementById("cryptoSelect").value;
  const targetPrice = parseFloat(document.getElementById("targetPrice").value);

  if (!targetPrice || isNaN(targetPrice)) {
    webapp.showAlert("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É");
    return;
  }

  alertManager.addAlert(crypto, targetPrice, selectedCondition);
  renderAlerts();
  document.getElementById("targetPrice").value = "";
});

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤
function renderAlerts() {
  const container = document.getElementById("alertsList");
  container.innerHTML = "";

  alertManager.getAlerts().forEach((alert) => {
    const card = document.createElement("div");
    card.className = "alert-card";
    card.innerHTML = `
            <div class="alert-header">
                <h3>${getCryptoName(alert.crypto)}</h3>
                <button class="delete-btn" onclick="deleteAlert(${
                  alert.id
                })">‚úï</button>
            </div>
            <div>–¶–µ–ª—å: ${alert.condition === "above" ? ">" : "<"} $${
      alert.targetPrice
    }</div>
            <div class="price-info">
                <span class="current-price">–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: $<span id="price-${
                  alert.id
                }">...</span></span>
                <span class="distance" id="distance-${alert.id}"></span>
            </div>
        `;
    container.appendChild(card);
  });

  updatePrices();
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ HTML
window.deleteAlert = function (id) {
  alertManager.deleteAlert(id);
  renderAlerts();
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
function getCryptoName(id) {
  const select = document.getElementById("cryptoSelect");
  const option = Array.from(select.options).find((opt) => opt.value === id);
  return option ? option.text : id;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω
async function updatePrices() {
  const alerts = alertManager.getAlerts();
  if (alerts.length === 0) return;

  const ids = [...new Set(alerts.map((a) => a.crypto))].join(",");
  try {
    const data = await CryptoAPI.getPrices(ids);

    alerts.forEach((alert) => {
      const currentPrice = data[alert.crypto].usd;
      const priceElement = document.getElementById(`price-${alert.id}`);
      const distanceElement = document.getElementById(`distance-${alert.id}`);

      priceElement.textContent = currentPrice.toFixed(2);

      const percentDiff = (
        ((currentPrice - alert.targetPrice) / alert.targetPrice) *
        100
      ).toFixed(2);
      const isClose = Math.abs(percentDiff) < 5;

      if (alert.condition === "above") {
        if (currentPrice >= alert.targetPrice) {
          notifyTarget(alert, currentPrice);
        }
        distanceElement.textContent = `${percentDiff}% –¥–æ —Ü–µ–ª–∏`;
      } else {
        if (currentPrice <= alert.targetPrice) {
          notifyTarget(alert, currentPrice);
        }
        distanceElement.textContent = `${-percentDiff}% –¥–æ —Ü–µ–ª–∏`;
      }

      distanceElement.className = `distance ${isClose ? "close" : "far"}`;
    });
  } catch (error) {
    webapp.showAlert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö");
  }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–∏
function notifyTarget(alert, currentPrice) {
  const cryptoName = getCryptoName(alert.crypto);
  webapp.showAlert(
    `üéØ –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!\n${cryptoName}: $${currentPrice}\n` +
      `–¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞: $${alert.targetPrice}`
  );
  alertManager.deleteAlert(alert.id);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
setInterval(updatePrices, 30000);
